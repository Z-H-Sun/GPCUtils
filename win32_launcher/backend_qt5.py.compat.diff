diff --git a/backend_qt5.py b/backend_qt5.py
index 20b0b5b..eb4720b 100644
--- a/backend_qt5.py
+++ b/backend_qt5.py
@@ -108,6 +108,7 @@ def _create_qApp():
     global qApp
 
     if qApp is None:
+        QtWidgets.QApplication.addLibraryPath(os.path.join(os.path.dirname(os.path.realpath(__file__)), r"..\..\PyQt5\plugins")) # this sets the qt dll path, which removes the necessity of a 'qt.conf'
         app = QtWidgets.QApplication.instance()
         if app is None:
             # check for DISPLAY env variable on X11 build of Qt
@@ -124,18 +125,23 @@ def _create_qApp():
                 if display is None or not re.search(r':\d', display):
                     raise RuntimeError('Invalid DISPLAY variable')
 
-            qApp = QtWidgets.QApplication([b"matplotlib"])
+            qApp = QtWidgets.QApplication([b"matplotlib", b"-platform", b"windows:dpiawareness=0"]) # for qt <5.6 (unfortunately only qt v5.5.1 was found compiled for python 3.4, the latest python version that can run on WinXP), AA_EnableHighDpiScaling (below) is not yet implemented, so on scaled screens, must turn off dpiawareness to let Windows take care of the scaling (although this compatible mode will make the window a bit blurry, but that's already the best treatment for this legacy version)
+            default_font_name = "Segoe UI"
+            if default_font_name not in QtGui.QFontDatabase().families():
+                default_font_name = "Tahoma"
+            font = QtGui.QFont(); font.setFamily(default_font_name) # on e.g., a Chinese system, qt will stupidly choose SimSum as the default font, which is ugly; use the real default font, Segoe UI (for Windows>=7) or Tahoma (for XP), instead
+            qApp.setFont(font)
             qApp.lastWindowClosed.connect(qApp.quit)
         else:
             qApp = app
-
+"""
     if is_pyqt5():
         try:
             qApp.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps)
             qApp.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)
         except AttributeError:
             pass
-
+""" # this option is not available in qt 5.5
 
 def _allow_super_init(__init__):
     """
@@ -267,12 +273,14 @@ class FigureCanvasQT(QtWidgets.QWidget, FigureCanvasBase):
 
     @property
     def _dpi_ratio(self):
+        """
         # Not available on Qt4 or some older Qt5.
         try:
             # self.devicePixelRatio() returns 0 in rare cases
             return self.devicePixelRatio() or 1
         except AttributeError:
-            return 1
+        """ # this option is not available in qt 5.5
+        return 1
 
     def _update_dpi(self):
         # As described in __init__ above, we need to be careful in cases with
@@ -570,7 +578,9 @@ class FigureManagerQT(FigureManagerBase):
         self.window.closing.connect(canvas.close_event)
         self.window.closing.connect(self._widgetclosed)
 
-        self.window.setWindowTitle("Figure %d" % num)
+        main = os.path.splitext(os.path.basename(sys.argv[0]))[0]
+        if main.lower() != "readgpc": main += " - Process" if num == 1 else " - Result"
+        self.window.setWindowTitle(main) # instead of "Figure X," customize a better-understandable title for our apps
         image = os.path.join(matplotlib.rcParams['datapath'],
                              'images', 'matplotlib.svg')
         self.window.setWindowIcon(QtGui.QIcon(image))
